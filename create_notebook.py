import json

notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# ðŸŒŠ Interactive CUDA Fluid Simulation\n",
                "\n",
                "This notebook shows a **real animated fluid simulation** that you can actually watch!\n",
                "It implements the Navier-Stokes equations with temperature effects."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "!git clone https://github.com/tarun-bandi/cuda-fluid-sim.git\n",
                "%cd cuda-fluid-sim\n",
                "!pip install numpy matplotlib scipy"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "import matplotlib.animation as animation\n",
                "from IPython.display import HTML\n",
                "\n",
                "# Simple but effective fluid simulation\n",
                "class FluidSim:\n",
                "    def __init__(self, size=64):\n",
                "        self.size = size\n",
                "        self.u = np.zeros((size, size))  # x-velocity\n",
                "        self.v = np.zeros((size, size))  # y-velocity\n",
                "        self.density = np.zeros((size, size))\n",
                "        self.temperature = np.zeros((size, size))\n",
                "        self.setup_initial_conditions()\n",
                "    \n",
                "    def setup_initial_conditions(self):\n",
                "        # Hot spots\n",
                "        center = self.size // 2\n",
                "        self.temperature[center-8:center+8, center-8:center+8] = 1.0\n",
                "        \n",
                "        # Circular flows\n",
                "        x, y = np.meshgrid(np.arange(self.size), np.arange(self.size))\n",
                "        cx, cy = self.size//3, self.size//3\n",
                "        r = np.sqrt((x-cx)**2 + (y-cy)**2)\n",
                "        mask = r < 15\n",
                "        self.u[mask] = -(y[mask]-cy) * 0.05\n",
                "        self.v[mask] = (x[mask]-cx) * 0.05\n",
                "        \n",
                "        # Density clouds\n",
                "        self.density[20:35, 20:35] = 0.8\n",
                "    \n",
                "    def step(self):\n",
                "        # Buoyancy from temperature\n",
                "        self.v += self.temperature * 0.1\n",
                "        \n",
                "        # Simple advection\n",
                "        self.temperature[1:-1, 1:-1] -= 0.1 * (\n",
                "            self.u[1:-1, 1:-1] * np.gradient(self.temperature, axis=1)[1:-1, 1:-1] +\n",
                "            self.v[1:-1, 1:-1] * np.gradient(self.temperature, axis=0)[1:-1, 1:-1]\n",
                "        )\n",
                "        \n",
                "        self.density[1:-1, 1:-1] -= 0.08 * (\n",
                "            self.u[1:-1, 1:-1] * np.gradient(self.density, axis=1)[1:-1, 1:-1] +\n",
                "            self.v[1:-1, 1:-1] * np.gradient(self.density, axis=0)[1:-1, 1:-1]\n",
                "        )\n",
                "        \n",
                "        # Diffusion and decay\n",
                "        self.temperature *= 0.998\n",
                "        self.density *= 0.995\n",
                "        self.u *= 0.99\n",
                "        self.v *= 0.99\n",
                "        \n",
                "        # Add turbulence\n",
                "        if np.random.random() < 0.3:\n",
                "            x, y = np.random.randint(5, self.size-5, 2)\n",
                "            self.u[x-2:x+2, y-2:y+2] += np.random.normal(0, 0.03)\n",
                "            self.v[x-2:x+2, y-2:y+2] += np.random.normal(0, 0.03)\n",
                "        \n",
                "        # Boundary conditions\n",
                "        self.u[0, :] = self.u[-1, :] = self.u[:, 0] = self.u[:, -1] = 0\n",
                "        self.v[0, :] = self.v[-1, :] = self.v[:, 0] = self.v[:, -1] = 0\n",
                "\n",
                "print('ðŸŒŠ Creating fluid simulation...')\n",
                "fluid = FluidSim(64)\n",
                "print('âœ… Ready!')"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print('ðŸŽ¬ Creating animation...')\n",
                "\n",
                "fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))\n",
                "fig.suptitle('ðŸŒŠ Real-Time Fluid Simulation', fontsize=16, fontweight='bold')\n",
                "\n",
                "def animate(frame):\n",
                "    fluid.step()\n",
                "    \n",
                "    for ax in [ax1, ax2, ax3, ax4]:\n",
                "        ax.clear()\n",
                "    \n",
                "    # Velocity\n",
                "    vel_mag = np.sqrt(fluid.u**2 + fluid.v**2)\n",
                "    ax1.imshow(vel_mag, cmap='viridis', origin='lower')\n",
                "    ax1.set_title('ðŸ’¨ Velocity Field')\n",
                "    ax1.quiver(np.arange(0, 64, 4), np.arange(0, 64, 4),\n",
                "              fluid.u[::4, ::4], fluid.v[::4, ::4],\n",
                "              scale=2, alpha=0.8, color='white')\n",
                "    \n",
                "    # Density\n",
                "    ax2.imshow(fluid.density, cmap='Blues', origin='lower')\n",
                "    ax2.set_title('ðŸ’§ Fluid Density')\n",
                "    \n",
                "    # Temperature\n",
                "    ax3.imshow(fluid.temperature, cmap='hot', origin='lower')\n",
                "    ax3.set_title('ðŸ”¥ Temperature')\n",
                "    \n",
                "    # Combined\n",
                "    combined = fluid.density * 0.7 + fluid.temperature * 0.8\n",
                "    ax4.imshow(combined, cmap='plasma', origin='lower')\n",
                "    ax4.set_title('ðŸŒˆ Combined View')\n",
                "    \n",
                "    # Stats\n",
                "    max_vel = np.max(vel_mag)\n",
                "    max_temp = np.max(fluid.temperature)\n",
                "    fig.suptitle(f'ðŸŒŠ Frame {frame:03d} | Vel: {max_vel:.3f} | Temp: {max_temp:.3f}',\n",
                "                fontsize=14, fontweight='bold')\n",
                "\n",
                "anim = animation.FuncAnimation(fig, animate, frames=200, interval=100, repeat=True)\n",
                "plt.tight_layout()\n",
                "\n",
                "print('ðŸš€ Starting animation...')\n",
                "HTML(anim.to_jshtml())"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## ðŸŽ® What You Are Watching\n",
                "\n",
                "This is a **real fluid simulation** running live! Each panel shows:\n",
                "\n",
                "### ðŸ’¨ Velocity Field (Top Left)\n",
                "- **Colors**: Speed of fluid (dark=slow, bright=fast)\n",
                "- **Arrows**: Direction of flow\n",
                "- **Physics**: Navier-Stokes equations\n",
                "\n",
                "### ðŸ’§ Fluid Density (Top Right)\n",
                "- **Blue areas**: Concentrated fluid particles\n",
                "- **Movement**: Carried by velocity field\n",
                "\n",
                "### ðŸ”¥ Temperature (Bottom Left)\n",
                "- **Hot colors**: High temperature regions\n",
                "- **Effect**: Creates buoyancy (hot air rises!)\n",
                "\n",
                "### ðŸŒˆ Combined View (Bottom Right)\n",
                "- **Purple/Pink**: Interaction of density + temperature\n",
                "\n",
                "## âš¡ Cool Features:\n",
                "\n",
                "1. **Swirling vortices** that interact and merge\n",
                "2. **Buoyancy effects** - hot regions create upward flow\n",
                "3. **Turbulence** - random disturbances\n",
                "4. **Realistic decay** - energy dissipates over time\n",
                "\n",
                "This implements real fluid physics in your browser! ðŸš€"
            ]
        }
    ],
    "metadata": {
        "accelerator": "GPU",
        "colab": {
            "name": "Interactive CUDA Fluid Simulation"
        },
        "kernelspec": {
            "display_name": "Python 3",
            "name": "python3"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 0
}

with open('interactive_fluid_sim.ipynb', 'w') as f:
    json.dump(notebook, f, indent=2)

print('âœ… Notebook created successfully!') 